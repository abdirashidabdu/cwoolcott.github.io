*** Instructor Notes ***

Write out a high-level application architecture;

Implement logic for parsing command-line arguments and running the appropriate functionality in a cli.js file.

Implement the logic for searching for actors or shows using an object generated by a constructor function in a tv.js file.

Accepts command-line arguments indicating whether the user intends to search for tv shows or tv actors;

Makes an API request to one of two different API endpoints; and

Saves the results of the requests to a log.txt file and prints the data to the console.

---

01 Partners Do: Sketch Architecture (15 mins)

Instructions:

As a best practice, sketch out the architecture of your application before you start writing code.

For this exercise, start by describing what your application does. Do this in a bullet list.

Next, decide how you might divvy up these responsibilities. Would you write a single module that handles all of them? Would you write one module for each bullet list? Something else? Be sure to justify your decision.

Finally, draw a diagram describing the flow of your application. Don't worry about being too precise here, but include enough detail where you can use it as a guide to explain it to someone else. You can do this either by using pencil and paper or flowchart generation software like draw.io.

Take a moment to study the GIF  if stuck. Remember that this application also prints the logged data to a file named log.txt.

---

02 Partners Do: Implement CLI (15 mins) (Critical) Instructions:

When the completed cli.js file is run with node, it should be able to handle command line arguments similar to those below:

// Search for The Andy Griffith Show

node cli show The Andy Griffith Show
and

// Search for the actor Andy Griffith

node cli actor Andy Griffith
In these examples the cli expects input in the following format:

node cli <show-or-actor> <actor-or-show-name>
To begin, open cli.js and write code to store the <show-or-actor> command line argument in a variable named search.

Store the <actor-or-show-name> command line argument in a variable named term. Keep in mind that this argument may contain spaces so it may span multiple indexes of process.argv. Check out the Array Slice Method to achieve this.

Then write an if/else statement to print to the console whether a show or actor is being searched for.

We will add some functionality to actually perform the API calls in the next activity.

Bonus:

Write logic to set up a default search type and default term if either are missing.

----

6. Partners Do: Implement Find Show (30 mins) (Critical)

Instructions:

Open the tv.js file. This file contains a constructor function that will be used to create a TV object capable of searching the TV Maze API for shows and actors.

Install the request package by running npm install request in your terminal. We will use the request module to make AJAX requests to the TV Maze API. Require the request package and the built-in fs package at the top of the tv.js file.

Inside of the TV constructor function's findShow method, use the request package to hit the TV Maze API for the URL string.

Once you have the response body of the AJAX request, use JSON.parse to convert it to JSON (it comes back as a string).

After getting the JSON response from the AJAX request, create a string containing the following information from the returned show data:

The name of the show
The show's genre(s)
The show's average rating
The show's network name
The show's summary
Save this string to the log.txt file using the fs.appendFile method. If the file does not already exist, fs.appendFile will create it.

After saving the data to the log.txt file, print this information to the console.

Verify your code works by running the cli file and passing in the name of a TV show, e.g. node cli show Scrubs. This should print the specified information to the console and save it to the log.txt file.

Hints:

Check out some sample output from the TV Maze single show search API: http://api.tvmaze.com/singlesearch/shows?q=scrubs.

You would have used the request package for the Liri HW assignment. Refer back to this if you need a refresher on how to use the package.

Check out the selected answer for the question: how to append a file in node?

---

8. Partners Do: Implement Find Actor (25 mins) (Critical)

Open tv.js and update the constructor function's findActor method. It should use the request package to search the TV Maze API using the provided URL.

Once the data has been retrieved from the API, parse it as JSON (it should be a string initially) and grab only the first result (it should be an array of JSON objects).

Save the following information to the log.txt file using the fs.appendFile method:

The actor's name
The actor's birthday
The actor's gender
The actor's country
The actor's TV Maze URL
Once the data has been saved to the log.txt file, print it to the console.

Test that your code works properly by running the cli.js file with arguments. e.g. node cli actor Jennifer Aniston.

Hints:

Implementing the findActor method should be very similar to the findShow method, refer to this if stuck.

Check out this sample output from the TV Maze Actors API: http://api.tvmaze.com/search/people?q=jennifer%20aniston

---



Students Do: Callbacks Activity (15 mins) (High)

Instructions:

Write a function that accepts a string and a function as arguments. It should log the string, and then run the function.

Write a function that accepts a boolean value and a function as arguments. It should run the function if and only if the boolean argument is true.

Write a function that accepts a function (F) and a value (V), and returns a function that returns the result of running F on V. This sounds tricky, but it's easier than it sounds—just take it step by step!

Finally, write a short message to a file using fs.writeFile. Does this function use callbacks? If so, identify them.



*** Instructor Notes ***

***Closure***

An inner function that has access to the outer (enclosing) function's variables

function showName (firstName, lastName) {
	var nameIntro = "Your name is ";
	
    	// this inner function has access to the outer function's variables, including the parameter​
	function makeFullName () {  
		return nameIntro + firstName + " " + lastName;
	}
	
	return makeFullName ();
}

showName ("Bart", "Simpson"); // Your name is Bart Simpson

*** callback ****
function done(){
	console.log("Done");
}

//the parent function 
function increment(num, callBack){
	for(var i = 0; i <= num; i++){
  	console.log(i);
  }
  return callBack();
}

//the callback function is passed to the increment function 
increment(10, done);

*** Promise ***

var p = new Promise(function(resolve, reject) {
	
	// Do an async task async task and then...

	if(/* good condition */) {
		resolve('Success!');
	}
	else {
		reject('Failure!');
	}
});

p.then(function() { 
	/* do something with the result */
}).catch(function() {
	/* error :( */
})


*** Promise 2 *** 

function get(url){
	return new Promise(function(succeed, fail){
		var req = new XMLHttpRequest();
		req.open("GET", url, true);
		req.addEventListener("load", function(){
			if(req.status < 400){
				succeed(req.responseText);
			}else{
				fail(new Error("Request failed: " + req.statusText));
			}
		});
		req.addEventListener("error", function(){
			fail(new Error("Network error"));
		});
		req.send(null);
	});
}

